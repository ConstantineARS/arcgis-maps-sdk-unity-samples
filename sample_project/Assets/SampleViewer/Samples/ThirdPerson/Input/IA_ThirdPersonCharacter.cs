//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/SampleViewer/Samples/ThirdPerson/Input/IA_ThirdPersonCharacter.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IA_ThirdPersonCharacter: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IA_ThirdPersonCharacter()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IA_ThirdPersonCharacter"",
    ""maps"": [
        {
            ""name"": ""ThirdPersonCharacter"",
            ""id"": ""20b81479-24f3-4bd4-a9db-499b2fbdda50"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5ec7b160-5707-4501-95e3-591141efb9c9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""dcd8a149-dbf5-4f04-8d03-671fd9890f96"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""5e33b1ac-f8e4-4278-9e6b-83c9adb3f05c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""a09859e0-76a6-467d-9b6a-bc1d641edac4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Flying"",
                    ""type"": ""Button"",
                    ""id"": ""9fb74498-2b4f-4699-a009-ad07691348e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UnlockMouse"",
                    ""type"": ""Button"",
                    ""id"": ""25dfac90-8f1e-4966-89b0-ec524ec12154"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockMouse"",
                    ""type"": ""Button"",
                    ""id"": ""a9c2e2be-bbfd-4930-98e5-ce74411c0f4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Walk/GoDown"",
                    ""type"": ""Button"",
                    ""id"": ""66c04393-6914-475f-a6f2-350ab079d2ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0b871818-93f6-489e-a3a7-0d45d2d1fcc5"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""17ff1759-31d1-474f-9492-485efbdfed3e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9169bfa1-b120-4bec-84b1-e201e033b3ab"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4b5914ee-dc55-4ab7-99ec-24a2a4b6566a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""02c6be2f-73e7-4c20-aedf-610add1219bf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""36326cf3-7dd0-436a-8b6d-4ef9a6522bf9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""734b5085-9a1a-4b24-a21b-dc79540ec29c"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea75bd48-9805-48bf-ac6c-7fe5253eb741"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.2,y=0.2)"",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""474f33b7-1154-4943-9b47-8833452cd674"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""089cff4a-3715-4952-8653-7cebbcfc42f2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2965751a-84f1-46fb-8978-57b20db37630"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af1943e9-23bc-43ae-809a-f35fe4dd5a78"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11a3fe1f-d775-49aa-bd89-cec2f171e723"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flying"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e75fba5b-232f-4c14-ac16-e911ad97f180"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flying"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e13aad0d-965d-4304-a638-920f6ee45bc3"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse;Controller"",
                    ""action"": ""UnlockMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4c92491-6a45-4c05-8a0d-39917b90407c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse;Controller"",
                    ""action"": ""LockMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63626056-7d24-4331-9fac-3e3ff4388847"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk/GoDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9eb7e0ab-1272-4a2e-970c-e9e4b11e63ad"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk/GoDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ThirdPersonCharacter
        m_ThirdPersonCharacter = asset.FindActionMap("ThirdPersonCharacter", throwIfNotFound: true);
        m_ThirdPersonCharacter_Move = m_ThirdPersonCharacter.FindAction("Move", throwIfNotFound: true);
        m_ThirdPersonCharacter_Look = m_ThirdPersonCharacter.FindAction("Look", throwIfNotFound: true);
        m_ThirdPersonCharacter_Jump = m_ThirdPersonCharacter.FindAction("Jump", throwIfNotFound: true);
        m_ThirdPersonCharacter_Sprint = m_ThirdPersonCharacter.FindAction("Sprint", throwIfNotFound: true);
        m_ThirdPersonCharacter_Flying = m_ThirdPersonCharacter.FindAction("Flying", throwIfNotFound: true);
        m_ThirdPersonCharacter_UnlockMouse = m_ThirdPersonCharacter.FindAction("UnlockMouse", throwIfNotFound: true);
        m_ThirdPersonCharacter_LockMouse = m_ThirdPersonCharacter.FindAction("LockMouse", throwIfNotFound: true);
        m_ThirdPersonCharacter_WalkGoDown = m_ThirdPersonCharacter.FindAction("Walk/GoDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ThirdPersonCharacter
    private readonly InputActionMap m_ThirdPersonCharacter;
    private List<IThirdPersonCharacterActions> m_ThirdPersonCharacterActionsCallbackInterfaces = new List<IThirdPersonCharacterActions>();
    private readonly InputAction m_ThirdPersonCharacter_Move;
    private readonly InputAction m_ThirdPersonCharacter_Look;
    private readonly InputAction m_ThirdPersonCharacter_Jump;
    private readonly InputAction m_ThirdPersonCharacter_Sprint;
    private readonly InputAction m_ThirdPersonCharacter_Flying;
    private readonly InputAction m_ThirdPersonCharacter_UnlockMouse;
    private readonly InputAction m_ThirdPersonCharacter_LockMouse;
    private readonly InputAction m_ThirdPersonCharacter_WalkGoDown;
    public struct ThirdPersonCharacterActions
    {
        private @IA_ThirdPersonCharacter m_Wrapper;
        public ThirdPersonCharacterActions(@IA_ThirdPersonCharacter wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_ThirdPersonCharacter_Move;
        public InputAction @Look => m_Wrapper.m_ThirdPersonCharacter_Look;
        public InputAction @Jump => m_Wrapper.m_ThirdPersonCharacter_Jump;
        public InputAction @Sprint => m_Wrapper.m_ThirdPersonCharacter_Sprint;
        public InputAction @Flying => m_Wrapper.m_ThirdPersonCharacter_Flying;
        public InputAction @UnlockMouse => m_Wrapper.m_ThirdPersonCharacter_UnlockMouse;
        public InputAction @LockMouse => m_Wrapper.m_ThirdPersonCharacter_LockMouse;
        public InputAction @WalkGoDown => m_Wrapper.m_ThirdPersonCharacter_WalkGoDown;
        public InputActionMap Get() { return m_Wrapper.m_ThirdPersonCharacter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ThirdPersonCharacterActions set) { return set.Get(); }
        public void AddCallbacks(IThirdPersonCharacterActions instance)
        {
            if (instance == null || m_Wrapper.m_ThirdPersonCharacterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ThirdPersonCharacterActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Flying.started += instance.OnFlying;
            @Flying.performed += instance.OnFlying;
            @Flying.canceled += instance.OnFlying;
            @UnlockMouse.started += instance.OnUnlockMouse;
            @UnlockMouse.performed += instance.OnUnlockMouse;
            @UnlockMouse.canceled += instance.OnUnlockMouse;
            @LockMouse.started += instance.OnLockMouse;
            @LockMouse.performed += instance.OnLockMouse;
            @LockMouse.canceled += instance.OnLockMouse;
            @WalkGoDown.started += instance.OnWalkGoDown;
            @WalkGoDown.performed += instance.OnWalkGoDown;
            @WalkGoDown.canceled += instance.OnWalkGoDown;
        }

        private void UnregisterCallbacks(IThirdPersonCharacterActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Flying.started -= instance.OnFlying;
            @Flying.performed -= instance.OnFlying;
            @Flying.canceled -= instance.OnFlying;
            @UnlockMouse.started -= instance.OnUnlockMouse;
            @UnlockMouse.performed -= instance.OnUnlockMouse;
            @UnlockMouse.canceled -= instance.OnUnlockMouse;
            @LockMouse.started -= instance.OnLockMouse;
            @LockMouse.performed -= instance.OnLockMouse;
            @LockMouse.canceled -= instance.OnLockMouse;
            @WalkGoDown.started -= instance.OnWalkGoDown;
            @WalkGoDown.performed -= instance.OnWalkGoDown;
            @WalkGoDown.canceled -= instance.OnWalkGoDown;
        }

        public void RemoveCallbacks(IThirdPersonCharacterActions instance)
        {
            if (m_Wrapper.m_ThirdPersonCharacterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IThirdPersonCharacterActions instance)
        {
            foreach (var item in m_Wrapper.m_ThirdPersonCharacterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ThirdPersonCharacterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ThirdPersonCharacterActions @ThirdPersonCharacter => new ThirdPersonCharacterActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IThirdPersonCharacterActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnFlying(InputAction.CallbackContext context);
        void OnUnlockMouse(InputAction.CallbackContext context);
        void OnLockMouse(InputAction.CallbackContext context);
        void OnWalkGoDown(InputAction.CallbackContext context);
    }
}
